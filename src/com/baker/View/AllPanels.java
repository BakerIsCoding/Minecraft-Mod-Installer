/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.baker.View;

import com.baker.Requests.RequestGet;
import com.baker.simpleExceptions.SimpleException;
import com.baker.utils.DownloadWorker;
import com.baker.utils.HardwareInfoGetter;
import com.baker.utils.Popups;
import com.baker.utils.TextUpdater;
import com.baker.utils.ZipManager;
import java.io.File;
import java.util.Map;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/**
 *
 * @author Baker
 */
public class AllPanels extends javax.swing.JPanel {

    private int mouseX, mouseY;
    private RequestGet rget = new RequestGet();
    
    //Web
    public static final String domain = "https://btools.me";
    public static final String apikey = "API-EpVsPsKvqYhhcGKEeSNnWrZ1N5loZWlVK9iuumEP6wYsFBUUq6Ql";
    //Local
    //public static final String domain = "http://127.0.0.1";
    //public static String apikey = "API-gDjlVTn76N2ZpbaE8yuoVSgoOwGnXCHJJa7vMQOp";
    private Popups popup ;
    HardwareInfoGetter hardware = new HardwareInfoGetter();

    /**
     * Creates new form UserInfoPanel
     *
     * @param allUserData
     * @param authToken
     * @throws com.baker.simpleExceptions.SimpleException
     */
    public AllPanels() {
        popup = new Popups();
        
        
        initComponents();
        setDefaultInfo();
       
        

        //START VARIABLES
        statesVariables();

        //Set Text Area
        // Set size and location
        setSize(709, 353);
        setLocation(0, 0);

        try {
            userStatsPanel();
        } catch (SimpleException e) {
            System.out.println("error " + e.getMessage());
        }

        

        System.out.println("Started!");
        popup.youtubePopup("Recuerda!", "Recuerda que puedes ver un tutorial para saber como instalar los mods.\nPresiona el botón \"Ver Tutorial\" para verlo.", "https://www.youtube.com/watch?v=Jln_PDI6uts");

    }

    public void statesVariables() {
        checkboxDecompress.setSelected(true);
        checkboxDecompress.setEnabled(true);
        checkboxInstallMods.setSelected(true);
        checkboxInstallMods.setEnabled(true);
        checkboxInstallShaders.setSelected(true);
        checkboxInstallFancy.setSelected(true);
        checkboxInstallFancy.setEnabled(true);
        checkboxInstallDistantHorizons.setEnabled(true);
        checkboxInstallDistantHorizons.setSelected(true);
        checkboxDeleteTempFiles.setEnabled(true);
        checkboxDeleteTempFiles.setSelected(true);
        checkboxInstallFabric.setSelected(true);
        checkboxInstallSklauncher.setSelected(true);

    }

    public void updateSpeed(double speed) {
        SwingUtilities.invokeLater(() -> speedLabel.setText("Velocidad: " + speed + " MB/s"));
    }

    private void setDefaultInfo() {
        try {
            if (hardware.getOsType() == 0) {
                String appDataPath = System.getenv("APPDATA");
                String minecraftModsPath = appDataPath + File.separator + ".minecraft" + File.separator + "mods";

                File modsFolder = new File(minecraftModsPath);

                if (!modsFolder.exists()) {
                    // Intentar crear la carpeta si no existe
                    boolean wasCreated = modsFolder.mkdirs();
                    if (!wasCreated) {
                        popup.errorPopup("Error", "No se pudo crear la carpeta de mods.");
                    }
                }

                if (modsFolder.exists() && modsFolder.isDirectory()) {
                    //modRoute.setText(minecraftModsPath);
                    System.out.println("xd1");
                } else {
                    System.out.println("xd");
                    //modRoute.setText("");
                }
            }

            String currentPath = System.getProperty("user.dir");

            String downloadsPath = currentPath + File.separator + "downloaded";
            //downloadZipModRoute.setText(downloadsPath);
        } catch (Exception e) {
            popup.errorPopup("Error", e.getMessage());
        }

    }

    private void userStatsPanel() throws SimpleException {
        userInfoWriteOnLabels();

    }

    private void userInfoWriteOnLabels() throws SimpleException {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modsPanel = new javax.swing.JPanel();
        downloadButton = new javax.swing.JButton();
        titleMods = new javax.swing.JLabel();
        checkboxInstallMods = new javax.swing.JCheckBox();
        separator1 = new javax.swing.JSeparator();
        checkboxDecompress = new javax.swing.JCheckBox();
        separator2 = new javax.swing.JSeparator();
        titleDistantHorizons = new javax.swing.JLabel();
        separator4 = new javax.swing.JSeparator();
        titleConfigs = new javax.swing.JLabel();
        separator5 = new javax.swing.JSeparator();
        titleFancymenu = new javax.swing.JLabel();
        checkboxInstallFancy = new javax.swing.JCheckBox();
        titleAll = new javax.swing.JLabel();
        speedLabel = new javax.swing.JLabel();
        etaLabel = new javax.swing.JLabel();
        separator7 = new javax.swing.JSeparator();
        titleShaders = new javax.swing.JLabel();
        checkboxInstallShaders = new javax.swing.JCheckBox();
        titleShaders1 = new javax.swing.JLabel();
        separator11 = new javax.swing.JSeparator();
        descargaLabel = new javax.swing.JLabel();
        checkboxInstallDistantHorizons = new javax.swing.JCheckBox();
        separator6 = new javax.swing.JSeparator();
        checkboxDeleteTempFiles = new javax.swing.JCheckBox();
        checkboxInstallSklauncher = new javax.swing.JCheckBox();
        checkboxInstallFabric = new javax.swing.JCheckBox();

        downloadButton.setText("Iniciar Descargas");
        downloadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                downloadButtonMousePressed(evt);
            }
        });

        titleMods.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleMods.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleMods.setText("Mods");

        checkboxInstallMods.setText("Descargar Mods");
        checkboxInstallMods.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxInstallModsItemStateChanged(evt);
            }
        });

        separator1.setForeground(new java.awt.Color(155, 216, 184));

        checkboxDecompress.setText("Instalar Mods");

        separator2.setForeground(new java.awt.Color(155, 216, 184));

        titleDistantHorizons.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        titleDistantHorizons.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleDistantHorizons.setText("Distant Horizons");

        separator4.setForeground(new java.awt.Color(155, 216, 184));

        titleConfigs.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleConfigs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleConfigs.setText("Configs");

        separator5.setForeground(new java.awt.Color(155, 216, 184));

        titleFancymenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        titleFancymenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleFancymenu.setText("FancyMenu");

        checkboxInstallFancy.setText("Instalar Menu");
        checkboxInstallFancy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxInstallFancyItemStateChanged(evt);
            }
        });

        titleAll.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleAll.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleAll.setText("Mod Downloader");

        speedLabel.setText("Velocidad: 00.00 MB/s");

        etaLabel.setText("Tiempo estimado: 0 s");

        separator7.setForeground(new java.awt.Color(155, 216, 184));

        titleShaders.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        titleShaders.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleShaders.setText("Shaders");

        checkboxInstallShaders.setText("Instalar Shaders");
        checkboxInstallShaders.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxInstallShadersItemStateChanged(evt);
            }
        });

        titleShaders1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        titleShaders1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleShaders1.setText("Opciones Avanzadas");

        separator11.setForeground(new java.awt.Color(155, 216, 184));

        descargaLabel.setText("Tamaño estimado: 0");

        checkboxInstallDistantHorizons.setText("Descargar e instalar");
        checkboxInstallDistantHorizons.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxInstallDistantHorizonsItemStateChanged(evt);
            }
        });
        checkboxInstallDistantHorizons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxInstallDistantHorizonsActionPerformed(evt);
            }
        });

        separator6.setForeground(new java.awt.Color(155, 216, 184));

        checkboxDeleteTempFiles.setText("Eliminar archivos temporales");
        checkboxDeleteTempFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxDeleteTempFilesActionPerformed(evt);
            }
        });

        checkboxInstallSklauncher.setText("Descarga Sklauncher");
        checkboxInstallSklauncher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxInstallSklauncherActionPerformed(evt);
            }
        });

        checkboxInstallFabric.setText("Descarga Fabric");
        checkboxInstallFabric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxInstallFabricActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modsPanelLayout = new javax.swing.GroupLayout(modsPanel);
        modsPanel.setLayout(modsPanelLayout);
        modsPanelLayout.setHorizontalGroup(
            modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modsPanelLayout.createSequentialGroup()
                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(titleAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(separator1, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(modsPanelLayout.createSequentialGroup()
                        .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(modsPanelLayout.createSequentialGroup()
                                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(modsPanelLayout.createSequentialGroup()
                                        .addComponent(titleMods, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(modsPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(titleShaders1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(modsPanelLayout.createSequentialGroup()
                                                .addComponent(separator11, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(checkboxDecompress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(separator2)
                                            .addComponent(checkboxInstallMods, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(checkboxDeleteTempFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(18, 18, 18))
                            .addGroup(modsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(checkboxInstallSklauncher)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleConfigs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(separator4)
                            .addGroup(modsPanelLayout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(etaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(speedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(descargaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(modsPanelLayout.createSequentialGroup()
                                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(titleShaders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(checkboxInstallShaders)
                                        .addComponent(separator6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(separator5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(titleDistantHorizons, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(checkboxInstallDistantHorizons, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(titleFancymenu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(separator7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkboxInstallFancy)))))
                    .addComponent(downloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44))
            .addGroup(modsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkboxInstallFabric)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modsPanelLayout.setVerticalGroup(
            modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleAll)
                .addGap(0, 0, 0)
                .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleMods)
                    .addComponent(titleConfigs))
                .addGap(0, 0, 0)
                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modsPanelLayout.createSequentialGroup()
                        .addComponent(separator4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(titleDistantHorizons)
                            .addComponent(titleFancymenu)
                            .addComponent(titleShaders))
                        .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(separator7, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(separator5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(separator6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(modsPanelLayout.createSequentialGroup()
                        .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(checkboxDecompress)
                        .addGap(0, 0, 0)
                        .addComponent(checkboxInstallMods)))
                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkboxInstallFancy)
                    .addComponent(checkboxInstallDistantHorizons)
                    .addComponent(checkboxInstallShaders))
                .addGap(10, 10, 10)
                .addComponent(titleShaders1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator11, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkboxDeleteTempFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkboxInstallFabric)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(modsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descargaLabel)
                    .addComponent(checkboxInstallSklauncher))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(etaLabel)
                .addGap(6, 6, 6)
                .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(modsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(modsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents


    private void downloadButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadButtonMousePressed

        downloadButton.setEnabled(false);

        Popups popup = new Popups();
        ZipManager zipmanager = new ZipManager();
        String appDataPath = System.getenv("APPDATA");

        System.out.println(appDataPath);

        String zipFilePath = appDataPath + File.separator + ".minecraft-mod-installer" + File.separator + "temp" + File.separator;
        String destDirectory = appDataPath + File.separator + ".minecraft" + File.separator;

        Map<String, String> parametersApi = Map.of(
                "apikey", apikey
        );

        Map<String, String> parametersSize = Map.of(
                "apikey", apikey,
                "getfilesize", "pleasegivemethefilesize"
        );

        Map<String, String> parametersDownload = Map.of(
                "apikey", apikey,
                "link", "pleasegivemethedownloadlink"
        );

        String modsUrl = null, shaderUrl = null, configUrl = null, horizonsUrl = null;

        if (checkboxInstallMods.isSelected()) {
            modsUrl = rget.getDownloadLink(domain + "/api/minecraft/getmods.php", parametersDownload);
        }

        if (checkboxInstallShaders.isSelected()) {
            shaderUrl = rget.getDownloadLink(domain + "/api/minecraft/getshaders.php", parametersDownload);
        }

        if (checkboxInstallDistantHorizons.isSelected()) {
            horizonsUrl = rget.getDownloadLink(domain + "/api/minecraft/getdistanthorizons.php", parametersDownload);
        }
        
        if(checkboxInstallFancy.isSelected()){
            configUrl = rget.getDownloadLink(domain + "/api/minecraft/getconfigs.php", parametersDownload);
        }
        

        DownloadWorker worker = new DownloadWorker(
                modsUrl,
                shaderUrl,
                configUrl,
                horizonsUrl,
                zipFilePath,
                speedLabel,
                etaLabel,
                zipmanager,
                destDirectory,
                downloadButton,
                descargaLabel,
                domain
        );

        worker.setInstallMods(checkboxInstallMods.isSelected());
        worker.setRemovelZip(checkboxDeleteTempFiles.isSelected());
        worker.setCanDownloadSklauncher(checkboxInstallSklauncher.isSelected());
        worker.setCanDownloadFabric(checkboxInstallFabric.isSelected());
        
        worker.execute();

    }//GEN-LAST:event_downloadButtonMousePressed

    private void checkboxInstallModsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxInstallModsItemStateChanged
        actualizeTamanyo();
    }//GEN-LAST:event_checkboxInstallModsItemStateChanged

    private void checkboxInstallShadersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxInstallShadersItemStateChanged
        actualizeTamanyo();
    }//GEN-LAST:event_checkboxInstallShadersItemStateChanged

    private void checkboxInstallFancyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxInstallFancyItemStateChanged
        actualizeTamanyo();
    }//GEN-LAST:event_checkboxInstallFancyItemStateChanged

    private void checkboxInstallDistantHorizonsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxInstallDistantHorizonsItemStateChanged
        actualizeTamanyo();
    }//GEN-LAST:event_checkboxInstallDistantHorizonsItemStateChanged

    private void checkboxInstallDistantHorizonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxInstallDistantHorizonsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkboxInstallDistantHorizonsActionPerformed

    private void checkboxDeleteTempFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxDeleteTempFilesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkboxDeleteTempFilesActionPerformed

    private void checkboxInstallFabricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxInstallFabricActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkboxInstallFabricActionPerformed

    private void checkboxInstallSklauncherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxInstallSklauncherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkboxInstallSklauncherActionPerformed

    private void actualizeTamanyo() {
        new Thread(new TextUpdater(this)).start();
    }

    public void enableDowloadButton() {
        downloadButton.setEnabled(true);
    }

    public JCheckBox getCheckboxDecompress() {
        return checkboxDecompress;
    }

    public JCheckBox getCheckboxDeleteTempFiles() {
        return checkboxDeleteTempFiles;
    }

    public JCheckBox getCheckboxInstallDistantHorizons() {
        return checkboxInstallDistantHorizons;
    }

    public JCheckBox getCheckboxInstallFancy() {
        return checkboxInstallFancy;
    }

    public JCheckBox getCheckboxInstallMods() {
        return checkboxInstallMods;
    }

    public JCheckBox getCheckboxInstallShaders() {
        return checkboxInstallShaders;
    }
    
    public JLabel getDescargaLabel(){
        return descargaLabel;
    }
    
    public RequestGet getRget() {
        return rget;
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkboxDecompress;
    private javax.swing.JCheckBox checkboxDeleteTempFiles;
    private javax.swing.JCheckBox checkboxInstallDistantHorizons;
    private javax.swing.JCheckBox checkboxInstallFabric;
    private javax.swing.JCheckBox checkboxInstallFancy;
    private javax.swing.JCheckBox checkboxInstallMods;
    private javax.swing.JCheckBox checkboxInstallShaders;
    private javax.swing.JCheckBox checkboxInstallSklauncher;
    private javax.swing.JLabel descargaLabel;
    private javax.swing.JButton downloadButton;
    private javax.swing.JLabel etaLabel;
    private javax.swing.JPanel modsPanel;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator11;
    private javax.swing.JSeparator separator2;
    private javax.swing.JSeparator separator4;
    private javax.swing.JSeparator separator5;
    private javax.swing.JSeparator separator6;
    private javax.swing.JSeparator separator7;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JLabel titleAll;
    private javax.swing.JLabel titleConfigs;
    private javax.swing.JLabel titleDistantHorizons;
    private javax.swing.JLabel titleFancymenu;
    private javax.swing.JLabel titleMods;
    private javax.swing.JLabel titleShaders;
    private javax.swing.JLabel titleShaders1;
    // End of variables declaration//GEN-END:variables
}
